description "btmux"
start on runlevel [2345]
stop on runlevel [!2345]
#Send KILL after 20 seconds
kill timeout 20
setuid {{ btmux_user }}
chdir {{ btmux_game_path }}

env MUX_CONFIG={{ btmux_game_path }}/mux.config

pre-start script
    . "$MUX_CONFIG"
    MKINDX={{ btmux_game_bin_path }}/mkindx
    $MKINDX $TEXT/news.txt $TEXT/news.indx
    $MKINDX $TEXT/help.txt $TEXT/help.indx
    $MKINDX $TEXT/wizhelp.txt $TEXT/wizhelp.indx
    $MKINDX $TEXT/plushelp.txt $TEXT/plushelp.indx
    $MKINDX $TEXT/wiznews.txt $TEXT/wiznews.indx

    if [ -r $DATA/$INPUT_DB ]; then
        mv -f $DATA/$INPUT_DB $DATA/$SAVE_DB
    fi

    if [ -r $LOGS/$LOGNAME ]; then
        mv -f $LOGS/$LOGNAME $LOGS/$LOGNAME.old
    fi
    #
    #       If we have a good checkpoint database, make it the input database.
    #       If not, use the backup of the input database.
    #
    if [ -r $DATA/$NEW_DB ]; then
        mv $DATA/$NEW_DB $DATA/$INPUT_DB
    else
        cp $DATA/$SAVE_DB $DATA/$INPUT_DB
    fi
    #
    #       Remove the restart db if there is one.
    #
    if [ -r $DATA/restart.db ]; then
        rm $DATA/restart.db
    fi

    #
    #       Refuse to start if CORRUPT or KILLED databases are present.
    #
    if [ -r $DATA/$INPUT_DB.KILLED -o -r $DATA/$INPUT_DB.CORRUPT -o -r $DATA/$INPUT_DB.CRASH ]; then
        echo "There is a CORRUPT, KILLED or CRASH database present."
        echo "You should salvage what you can before continuing."
        exit 1
    fi
end script

script
    . "$MUX_CONFIG"

    #
    #       Kick off MUX
    #
    ulimit -c unlimited
    if [ -x $BIN/netmux.debug ]; then
        exec $BIN/netmux.debug
    elif [ -x $BIN/netmux ]; then
        exec $BIN/netmux
    else
        echo No binary found!
        exit 1
    fi
end script

respawn
